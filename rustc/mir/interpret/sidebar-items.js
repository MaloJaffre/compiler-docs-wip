initSidebarItems({"enum":[["AccessKind",""],["EvalErrorKind",""],["Lock",""],["PrimVal","A `PrimVal` represents an immediate, primitive value existing outside of a `memory::Allocation`. It is in many ways like a small chunk of a `Allocation`, up to 8 bytes in size. Like a range of bytes in an `Allocation`, a `PrimVal` can either represent the raw bytes of a simple value, a pointer into another `Allocation`, or be undefined."],["PrimValKind",""],["Value","A `Value` represents a single self-contained Rust value."]],"fn":[["bytes_to_f32",""],["bytes_to_f64",""]],"struct":[["AllocId",""],["Allocation",""],["DynamicLifetime",""],["EvalError",""],["GlobalId","Uniquely identifies a specific constant or static."],["MemoryPointer",""],["Pointer","A wrapper type around `PrimVal` that cannot be turned back into a `PrimVal` accidentally. This type clears up a few APIs where having a `PrimVal` argument for something that is potentially an integer pointer or a pointer to an allocation was unclear."],["PtrAndAlign",""],["UndefMask",""]],"trait":[["PointerArithmetic",""]],"type":[["EvalResult",""]]});